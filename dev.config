%% -*- mode: erlang -*-
%% Copyright (c) 2022 Peter Morgan <peter.james.morgan@gmail.com>
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%% http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.

[{kernel, [{logger_level, notice},
           {logger,
            [{module_level, debug, []},

             %% pgmp_telemetry_logger should be set to info for the
             %% telemetry examples to work
             %%
             {module_level, info, [pgmp_telemetry_logger]},

             {module_level, notice, [supervisor_bridge,
                                     supervisor]},

             {module_level, emergency, [application_controller]},

             {handler,
              default,
              logger_std_h,
              #{formatter => {logger_formatter,
                              #{template => [[logger_formatter, header],
                                             {pid, [" ", pid, ""], ""},
                                             {mfa, [" ", mfa, ":", line], ""},
                                             "\n",
                                             msg,
                                             "\n"],
                                legacy_header => true,
                                single_line => false}}}}]}]},

 {pgmp, [%% When the protocol socket crashes have the last N
         %% events available in the stacktrace log.
         {socket_log_n, 20},

         %% Enable or disable event logging on the underlying protocol
         %% socket.
         %%
         {socket_log, true},

         %% Enable or disable tracing on underlying protocol socket.
         %% {socket_trace, true},

         %% database hostname to initiate a connection.
         %%
         %% {database_hostname, "localhost"},

         %% The username used to connect to the database, defaulting
         %% to os:getenv("USER").
         %%
         %% {database_user, <<"pmorgan">>},

         %% The name of the database, defaulting to the username.
         %%
         %% {database_name, <<"scram">>},

         %% The password used to connect to the database if required.
         %%
         %% {database_password, <<"98MgGgBpW4xmOiU0">>},

         %% Control whether the type manager is enabled on application
         %% startup. Default is for the type manager to be
         %% started. This stanza can normally be safely commented out.
         %%
         %% {pgmp_types_enabled, false},

         %% Enable or disable tracing of the type manager
         %%
         %% {types_trace, true},

         %% Enable or disable tracing of the ETS logical replication
         %% plugin.
         %%
         %% {rep_log_ets_trace, true},
         {rep_log_ets_log_n, 20},

         %% connection tracing:
         %% {connection_trace, true},

         %% Controls whether replication is enabled or disabled.
         %%
         %% {pgmp_replication_enabled, true},


         %% A comma separated list of publication names used for
         %% logical replication.
         %%
         %% {replication_logical_publication_names, <<"xy,xyz">>},
         %% {replication_logical_publication_names, <<"pub">>},


         %% send a client ping request if we haven't heard from the
         %% WAL sender within this timeout in milisecond.
         %%
         {replication_ping_timeout, 30_000},

         %% wait for this timeout in milisecond to hear from the WAL
         %% sender if we initiate a ping request.
         %%
         {replication_ping_no_reply_timeout, 5_000},

         %% override supervisor restart intensity and period:
         %%
         %% {pgmp_sup_restart_intensity, 60},
         %% {pgmp_sup_restart_period, 1},
         {pgmp_rep_log_sup_restart_intensity, 60},
         {pgmp_rep_log_sup_restart_period, 1},
         {pgmp_rep_log_stream_sup_restart_intensity, 60},
         {pgmp_rep_log_stream_sup_restart_period, 1},

         {named_statements,
          #{<<"now">> => <<"select now()">>,
            <<"cursors">> => <<"select * from pg_catalog.pg_cursors">>,
            <<"prepared">> => <<"select * from pg_catalog.pg_prepared_statements">>,
            <<"yesterday">> => <<"select timestamp 'yesterday'">>,
            <<"allballs">> => <<"select time 'allballs'">>}},

         {codec_json, jsx},
         {codec_jsonb, jsx},

         %% telemetry handler
         %%
         %% telemetry function must be of arity 4.
         %% {telemetry_module, pgmp_telemetry_logger},
         %% {telemetry_function, handle},
         %%
         %% consult the filename, attaching all events found:
         %% {telemetry_event_names, "priv/telemetry.terms"},
         %%
         %% final supplied parameter to the telemetry handler
         %% {telemetry_config, {hello,world}},


         %% enable or disable tracing on the protocol middleman
         %% between the underlying socket.
         %%
         %% {mm_trace, true},

         %% when the protocol middleman crashes have the last N
         %% events available in the stacktrace log.
         {mm_log_n, 20},

         %% enable or disable event logging in the protocol middleman.
         %%
         {mm_log, true}]}].
